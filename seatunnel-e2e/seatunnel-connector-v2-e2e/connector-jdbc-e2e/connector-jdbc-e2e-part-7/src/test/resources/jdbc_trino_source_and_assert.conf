#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

env {
  parallelism = 1
  job.mode = "BATCH"
}

source {
  jdbc {
    url = "jdbc:trino://e2e-trino:8080/memory?timezone=UTC"
    driver = "io.trino.jdbc.TrinoDriver"
    connection_check_timeout_sec = 100
    user = "trino"
    query = "select * from memory.default.trino_e2e_source_table"
    split.size = 10
  }
}

transform {
}



sink {
assert {
    rules =
      {
        row_rules = [
          {
            rule_type = MAX_ROW
            rule_value = 3
          },
          {
            rule_type = MIN_ROW
            rule_value = 3
          }
        ],
        field_rules = [
        {
          field_name = id
          field_type = long
          field_value = [{equals_to = 1}]
        },
        {
          field_name = boolean_col
          field_type = boolean
          field_value = [{equals_to = "TRUE"}]
        },
        {
          field_name = tinyint_col
          field_type = tinyint
          field_value = [{equals_to = 127}]
        },
        {
          field_name = smallint_col
          field_type = smallint
          field_value = [{equals_to = 32767}]
         },
        {
          field_name = integer_col
          field_type = int
          field_value = [{equals_to = 3}]
         },
        {
          field_name = bigint_col
          field_type = long
          field_value = [{equals_to = 1234567890}]
          },
        {
          field_name = decimal_col
          field_type = "decimal(22,4)"
          field_value = [{equals_to = "55.0005"}]
          },
        {
          field_name = real_col
          field_type = float
          field_value = [{equals_to = 67.89}]
          },
        {
          field_name = double_col
          field_type = double
          field_value = [{equals_to = 123.45}]
          },
        {
          field_name = char_col
          field_type = string
          field_value = [{equals_to = "8"}]
          },
        {
          field_name = varchar_col
          field_type = string
          field_value = [{equals_to = "VarcharCol"}]
          },
        {
          field_name = date_col
          field_type = date
          field_value = [{equals_to = "2024-01-01"}]
          },
        {
          field_name = time_col
          field_type = time
          field_value = [{equals_to = "12:01:01"}]
          },
        {
          field_name = timestamp_col
          field_type = timestamp
          field_value = [{equals_to = "2024-01-01T12:01:01"}]
          },
        {
          field_name = varbinary_col
          field_type = bytes
          field_value = [{equals_to = "c3Ry"}]
          },
        {
         field_name = json_col
          field_type = string
          field_value = [{equals_to = "{\"key\":\"val\"}"}]
         }
        ]
      }
    }
}
